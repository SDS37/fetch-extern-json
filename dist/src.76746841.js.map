{"version":3,"sources":["constants/constants.js","index.js"],"names":["JSON_URL","parties","fetch","then","response","json","data","parliamentMembers","personlista","person","map","parliamentMember","party","parti","name","tilltalsnamn","efternamn","includes","push","sort","a","b","createList","createFilterOptions","filterOptions","document","querySelectorAll","addEventListener","selectedOption","filter","value","Boolean","filteredMembers","member","forEach","li","parentNode","removeChild","parliamentMembersList","node","createElement","appendChild","createTextNode","getElementById","setAttribute"],"mappings":";AAAA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,cAAA,EAAA,IAAMA,EAAW,sDAAjB,QAAA,SAAA;;ACiDA,aAjDA,IAAA,EAAA,QAAA,yBAiDA,SAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,IAAA,IAAA,SAAA,IAAA,MAAA,IAAA,UAAA,mDAAA,SAAA,EAAA,GAAA,GAAA,OAAA,YAAA,OAAA,IAAA,uBAAA,OAAA,UAAA,SAAA,KAAA,GAAA,OAAA,MAAA,KAAA,GAAA,SAAA,EAAA,GAAA,GAAA,MAAA,QAAA,GAAA,CAAA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,MAAA,EAAA,QAAA,EAAA,EAAA,OAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,GA/CA,IAAMC,EAAU,CAAE,OAElBC,MAAMF,EAAD,UAAWG,KAAK,SAAAC,GACVA,OAAAA,EAASC,SACfF,KAAM,SAAAG,GACDC,IAAAA,EAAoBD,EAAKE,YAAYC,OAAOC,IAAK,SAAAD,GAC/CE,IAAAA,EAAmB,CACvBC,MAAOH,EAAOI,MACdC,KAASL,GAAAA,OAAAA,EAAOM,aAAgBN,KAAAA,OAAAA,EAAOO,YAGlCL,OADFV,EAAQgB,SAASR,EAAOI,QAAQZ,EAAQiB,KAAKT,EAAOI,OAClDF,IACNQ,KAAM,SAACC,EAAGC,GACRD,OAAAA,EAAER,MAAQS,EAAET,OAAiB,EAC7BQ,EAAER,MAAQS,EAAET,MAAgB,EACxB,IAIXU,EAAWf,GAEXgB,IAEMC,IAAAA,EAAoBC,EAAAA,SAASC,iBAAiB,mBAnBnC,GAAA,EAAA,GAAA,EAAA,OAAA,EAAA,IAqBIF,IAAAA,IAAe,EAAfA,EAAAA,EAAe,OAAA,cAAA,GAAA,EAAA,EAAA,QAAA,MAAA,GAAA,EAAA,CAAA,EAAA,MAC3BG,iBAAiB,SAAU,WAC1BC,IAAAA,EAAiBJ,EAAcd,IAAI,SAAAmB,GAAUA,OAAAA,EAAOC,QAAOD,OAAOE,SAAS,GAC3EC,EAAqC,QAAnBJ,EAA2BrB,EAAoBA,EAAkBsB,OAAQ,SAAAI,GAAUA,OAAAA,EAAOrB,QAAUgB,IAE5HH,SAASC,iBAAiB,MAAMQ,QAAS,SAAAC,GAAMA,OAAAA,EAAGC,WAAWC,YAAYF,KAEzEb,EAAWU,MA5BE,MAAA,GAAA,GAAA,EAAA,EAAA,EAAA,QAAA,IAAA,GAAA,MAAA,EAAA,QAAA,EAAA,SAAA,QAAA,GAAA,EAAA,MAAA,MAmCnB,IAAMV,EAAa,SAACgB,GAClBA,EAAsB5B,IAAK,SAAAuB,GACnBM,IAAAA,EAAOd,SAASe,cAAc,MACpCD,EAAKE,YAAYhB,SAASiB,eAAkBT,GAAAA,OAAAA,EAAOrB,MAAWqB,OAAAA,OAAAA,EAAOnB,QACrEW,SAASkB,eAAe,mBAAmBF,YAAYF,MAIrDhB,EAAsB,WAC1BtB,EAAQS,IAAK,SAAAE,GACL2B,IAAAA,EAAOd,SAASe,cAAc,UACpCD,EAAKE,YAAYhB,SAASiB,eAAkB9B,GAAAA,OAAAA,KAC5C2B,EAAKK,aAAa,QAAShC,GAC3Ba,SAASkB,eAAe,WAAWF,YAAYF","file":"src.76746841.js","sourceRoot":"../src","sourcesContent":["const JSON_URL = 'http://data.riksdagen.se/personlista/?utformat=json';\n\nexport { JSON_URL }","import { JSON_URL } from './constants/constants';\n\nconst parties = [ 'all' ];\n\nfetch(JSON_URL).then(response => {\n    return response.json();\n  }).then( data => {\n    const parliamentMembers = data.personlista.person.map( person => {\n      const parliamentMember = {\n        party: person.parti,\n        name: `${person.tilltalsnamn} ${person.efternamn}`\n      }\n      if (!parties.includes(person.parti)) parties.push(person.parti);\n      return parliamentMember;\n    }).sort( (a, b) => {\n      if(a.party < b.party) { return -1; };\n      if(a.party > b.party) { return 1; };\n      return 0;\n    });\n\n  // creates default list - all\n  createList(parliamentMembers);\n  // creates filter options\n  createFilterOptions();\n  // gets select options\n  const filterOptions = [...document.querySelectorAll('.filter select')];\n  // Selected option event listener\n  for (const option of filterOptions) {\n    option.addEventListener('change', () => {\n      const selectedOption = filterOptions.map(filter => filter.value).filter(Boolean)[0];\n      const filteredMembers = selectedOption === 'all' ? parliamentMembers : parliamentMembers.filter( member => member.party === selectedOption);\n      // removes current list\n      document.querySelectorAll('li').forEach( li => li.parentNode.removeChild(li));\n      // creates filtered list\n      createList(filteredMembers)\n    });\n  }\n\n});\n\n// helpers\nconst createList = (parliamentMembersList) => {\n  parliamentMembersList.map( member => {\n    const node = document.createElement(\"li\");\n    node.appendChild(document.createTextNode(`${member.party} - ${member.name}`));\n    document.getElementById(\"parlamient-list\").appendChild(node);\n  })\n}\n\nconst createFilterOptions = () => {\n  parties.map( party => {\n    const node = document.createElement(\"option\");\n    node.appendChild(document.createTextNode(`${party}`))\n    node.setAttribute('value', party);\n    document.getElementById(\"parties\").appendChild(node);\n  })\n}"]}